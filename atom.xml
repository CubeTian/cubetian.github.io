<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[程序猿CubeTian]]></title>
  <link href="https://cubetian.github.io/atom.xml" rel="self"/>
  <link href="https://cubetian.github.io/"/>
  <updated>2019-08-29T17:51:37+08:00</updated>
  <id>https://cubetian.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.coderforart.com/">CoderForArt</generator>

  
  <entry>
    <title type="html"><![CDATA[复变函数整理]]></title>
    <link href="https://cubetian.github.io/15670727988571.html"/>
    <updated>2019-08-29T17:59:58+08:00</updated>
    <id>https://cubetian.github.io/15670727988571.html</id>
    <content type="html"><![CDATA[
<p>单值：给定复数z，有唯一确定的复数w与之对应 如：\(w=\frac{z+1}{z-1}\)<br/>
多值：给定复数z，有几个或无穷多个w与之对应 如：\(w=\sqrt[n]{z}\) <br/>
单叶：对于\(\forall z_1 \neq z_2\) 有\(f(z_1)\neq f(z_2)\)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MYsql 学习教程]]></title>
    <link href="https://cubetian.github.io/15666534139692.html"/>
    <updated>2019-08-24T21:30:13+08:00</updated>
    <id>https://cubetian.github.io/15666534139692.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数学与计算机]]></title>
    <link href="https://cubetian.github.io/15662129253478.html"/>
    <updated>2019-08-19T19:08:45+08:00</updated>
    <id>https://cubetian.github.io/15662129253478.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[计算机二级python]]></title>
    <link href="https://cubetian.github.io/15655035745414.html"/>
    <updated>2019-08-11T14:06:14+08:00</updated>
    <id>https://cubetian.github.io/15655035745414.html</id>
    <content type="html"><![CDATA[
<ul>
<li>注释 #</li>
<li>续行符 反斜杠 \</li>
<li>命名 大小字母、下划线、数字、汉字<br/>
但首字母不能是数字</li>
<li>保留字：<br/>
False, True, and, as, break, continue, def, del, elif, else, except, for, from, global, if, import, in, not, or, return, try, while (22个，2个大写)<br/>
None, finally, lambda, pass, with</li>
<li>jieba.lcut(s,cut_all=True)<br/>
*0x4DC0 是一个十六进制数，它对应的 Unicode 编码是中国古老的《易经》六十四卦的第一卦，请输出第 51 卦（震卦）对应的 Unicode 编码的二进制、十进制、八进制和十六进制格式。
<code>print(&quot;二进制{0:b}、十进制{0:d}、八进制{0:o}、十六进制{0:x}&quot;.format(0x4DC0+50))
</code></li>
<li>字符串的索引：<br/>
正向索引：最左侧字符序号为0，向右依次递增，最右侧为L-1<br/>
反向索引：最右侧字符序号为-1，向左依次递减，最左侧为-L</li>
<li>字符串的索引：<br/>
切片部分必须连续，[a=0,b=L-1,step=1] </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[计算机二级 公共知识]]></title>
    <link href="https://cubetian.github.io/15653132926815.html"/>
    <updated>2019-08-09T09:14:52+08:00</updated>
    <id>https://cubetian.github.io/15653132926815.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">数据库知识基础</h2>

<ol>
<li>数据库系统的基本概念
<ol>
<li>数据（DATA）：描述事物的符号记录
<ol>
<li>数据分为临时性、持久性</li>
<li>数据有 型 、值 之分</li>
<li>将多种相关数据以一定的结构方式组合构成特定的数据框架，这样的数据框架称为数据结构，数据库在特定的条件下称为数据模式</li>
</ol></li>
<li>数据库（DATABASE，DB）：数据的集合，它具有统一的结构形式并存放于统一的存储介质内，是多种应用数据的集成，并可被各个应用程序所共享</li>
<li>数据库管理系统（Database Managerment System DBMS）：是数据库的机构，它是一种系统软件，负责数据库中的数据组织，数据操控，数据维护、控制及保护和数据服务<br/>
    功能：
<ol>
<li>数据模式定义</li>
<li>数据存取的物理构建</li>
<li>数据操纵</li>
<li>数据的完整性、安全性定义与检查：数据的完整性与安全性的维护是数据库管理系统的基本功能</li>
<li>数据库的并发控制与故障恢复</li>
<li>数据的服务：数据的拷贝、转存、重组、性能检测、分析<br/>
数据语言：</li>
<li>数据定义语言（DDL）：负责数据的模式定义与数据的物理存储构建</li>
<li>数据操作语言（DML）：负责数据的操作，查增删改</li>
<li>数据控制语言（DCL）：负责数据完整性、安全性的定义与检查以及并发控制、故障恢复等功能</li>
</ol></li>
<li>数据库管理员（DBA）：
<ol>
<li>数据库设计（Database Design）</li>
<li>数据库维护</li>
<li>改善系统性能，提高系统效率</li>
</ol></li>
<li>数据库系统（DBS）
<ol>
<li>数据库（数据）</li>
<li>数据库管理系统软件（软件）</li>
<li>数据库管理员（人员）</li>
<li>系统平台之一——硬件平台（硬件）：计算机、网络</li>
<li>系统平台之二——软件平台（软件）：操作系统、数据库系统开发工具</li>
</ol></li>
<li>数据库应用系统（DBAS）：数据库系统+应用软件+应用界面
<ol>
<li>数据库</li>
<li>数据库管理系统</li>
<li>数据库管理员</li>
<li>硬件平台</li>
<li>软件平台</li>
<li>应用软件</li>
<li>应用界面</li>
</ol></li>
</ol></li>
<li>数据库发展
<ol>
<li>文件系统阶段</li>
<li>层次数据库与网状数据库系统阶段</li>
<li>关系数据库系统阶段</li>
<li>未来：
<ol>
<li>面向对象数据库系统</li>
<li>知识库系统</li>
<li>关系数据库系统的扩充</li>
</ol></li>
</ol></li>
<li>数据库系统的基本特点
<ol>
<li>数据的集成性：
<ol>
<li>统一的数据结构方式</li>
<li>按照多个应用的需要组织全局的统一的数据结构</li>
<li>数据模式是多个应用共同的、全局的数据结构</li>
</ol></li>
<li>数据的高共享性与低冗余性</li>
<li>数据的独立性
<ol>
<li>物理独立性：数据库的物理结构改变不影响逻辑结构</li>
<li>逻辑独立性：数据库总体逻辑改变不影响相应的应用程序</li>
</ol></li>
<li>数据的统一管理与控制
<ol>
<li>数据的完整性检查</li>
<li>数据的安全性保护</li>
<li>并发控制</li>
</ol></li>
</ol></li>
<li>数据库系统的内部结构体系：数据库在其内部有三级模式及二级映射
<ol>
<li>三级模式
<ol>
<li>概念模式：数据库系统中全局数据逻辑结构的描述，是全体用户公用数据视图</li>
<li>外模式（子模式、用户模式）：用户的数据视图</li>
<li>内模式（物理模式）：数据物理存储结构与物理存取方法</li>
</ol></li>
<li>二级映射
<ol>
<li>概念模式到内模式的映射</li>
<li>外模式到概念模式到映射</li>
</ol></li>
</ol></li>
<li>数据模型：数据库中的数据模型可以将复杂的现实世界要求反映到计算机数据库中的物理世界，这种反映是一个逐步变化的过程：由现实世界开始，经历信息世界而至计算机世界
<ol>
<li>世界
<ol>
<li>现实世界（Real World）</li>
<li>信息世界（Information World）:通过抽象对现实世界进行数据库级上的刻画所构成的逻辑模型叫信息世界，信息世界与数据库的具体模型有关</li>
<li>计算机世界（Computer World）：在信息世界的基础上致力于其在计算机物理结构上的描述，而形成的逻辑模型叫计算机世界</li>
</ol></li>
<li>数据模型：数据模型所描述的内容有三个部分：数据结构、数据操作、数据约束
<ol>
<li>数据结构：主要描述数据的类型、内容、性质以及数据间的联系</li>
<li>数据操纵：</li>
<li>数据约束：描述数据结构内数据间的语法、语义联系，它们之间的制约与依存关系，以及数据间的动态变化规则</li>
</ol></li>
<li>分类：
<ol>
<li>概念数据模型：是一种面向客观世界、面向用户的模型。概念数据模型是整个数据模型的基础，如E-R模型、扩充的E-R模型、面向对象模型以及谓词模型</li>
<li>逻辑数据模型：是一种面向数据库系统的模型。如，层次模型、网状模型、关系模型、面向对象模型</li>
<li>物理数据模型：面向计算机物理表示的模型</li>
</ol></li>
</ol></li>
<li>E-R模型（实体联系模型）
<ol>
<li>基本概念：
<ol>
<li>实体：现实世界中的事物可以抽象成为实体，实体是概念世界中的基本单位，它们是客观存在又相互区别的事物</li>
<li>属性：现实世界中的事物均有一些特点，这些特性可以用属性来表示</li>
<li>联系：现实世界中事物之间的关联称为联系
<ol>
<li>实体集间的联系
<ol>
<li>两个实体集之间的联系</li>
<li>多个实体集之间的联系</li>
<li>一个实体集内部的联系</li>
</ol></li>
<li>联系的个数
<ol>
<li>一对一的联系，简记为1:1</li>
<li>一对多的联系，简记为1:m或m：1</li>
<li>多对多的联系，简记为m:n</li>
</ol></li>
</ol></li>
<li>三个基本概念之间的联系
<ol>
<li>实体集（联系）与属性之间的连接关系
<ol>
<li>一个实体的所有属性取值组成一个值集叫元组（Tuple）</li>
<li>联系也可以附有属性</li>
</ol></li>
<li>实体（集）与联系
<ol>
<li>实体集之间可以通过联系建立连接关系，实体集之间无法建立直接关系，它只能通过联系才能建立连接关系</li>
</ol></li>
</ol></li>
<li>E-R模型的图示法：
<ol>
<li>实体集：矩形表示实体集，在矩形内部写上该实体集的名字</li>
<li>属性：用椭圆表示属性，在椭圆内部写上该属性的名称</li>
<li>联系表示法：用菱形表示联系，内写上联系名</li>
<li>实体集（联系）与属性之间连接关系：用连接两个图形之间的无向线段表示</li>
<li>实体集与联系间的连接关系：用连接两个图形的无向线段表示，还可以注明对应的函数关系</li>
</ol></li>
</ol></li>
</ol></li>
<li>层次模型：
<ol>
<li>基本结构：树形结构</li>
<li>特点：
<ol>
<li>每棵树有且只有一个无双亲结点，称为根（Root）</li>
<li>树中除根以外所有结点有且只有一个双亲</li>
</ol></li>
<li>缺点：
<ol>
<li>如果没有相应的双亲结点值就不能插入子女结点值</li>
<li>如果删除双亲结点值，则相应的子女结点值也被同时删除</li>
<li>查询子女结点必须通过双亲结点</li>
</ol></li>
</ol></li>
<li>网状模型：网状模型是一个不加任何限制的无向图
<ol>
<li>网状模型将通用的网状拓扑结构分成一些基本结构。一般采用的分解方法是将一个网络分成若干个二级树</li>
<li>基本结构简单二级树叫系（Set），系的基本单位是记录（Record），系有一个首记录（Owner Record），它相当于简单二级树的根，系同时有若干个成员记录（Member Record）</li>
</ol></li>
<li>关系模型
<ol>
<li>关系的数据结构：关系模式采用二维表来表示，简称表。二维表由表框架（Frame）及表的元组（Tuple）组成。<br/>
二维表满足以下性质：满足以下性质的二维表称为关系（Relation）
<ol>
<li>元组个数有限性</li>
<li>元组唯一性</li>
<li>元组的次数无关性</li>
<li>元组分量的原子性</li>
<li>属性名唯一性</li>
<li>属性的次序无关性</li>
<li>分量的值域的同一性</li>
</ol></li>
<li>关系操作
<ol>
<li>数据查询：分解为一个关系内的属性指定、一个关系内的元组选择、两个关系的合并三个基本操作以及一个查询操作</li>
<li>数据删除：一个关系内的元组选择与关系中元组删除两个基本操作</li>
<li>数据插入：只有一个基本操作</li>
<li>数据修改：不是基本操作，可分解为删除需修改的元组与插入修改后的元组两个更基本操作</li>
</ol></li>
<li>关系中的数据约束
<ol>
<li>实体完整性约束</li>
<li>参照完整性约束：不允许关系引用不存在的元组：即在关系中的外键要么是所关联关系中实际存在的元组，要么就为空值</li>
<li>用户定义的完整性约束</li>
</ol></li>
</ol></li>
<li>关系代数
<ol>
<li>关系模型的基本操作：
<ol>
<li>关系的属性指定</li>
<li>关系的元组的选择</li>
<li>两个关系的合并</li>
<li>关系的查询</li>
<li>关系元组的插入</li>
<li>关系元组的删除</li>
</ol></li>
<li>关系模型的基本运算
<ol>
<li>插入</li>
<li>删除</li>
<li>修改：删除+插入</li>
<li>查询：
<ol>
<li>投影运算：投影出一个列（属性集合）</li>
<li>选择运算：选择元组</li>
<li>笛卡尔积运算：两个关系的合并操作</li>
</ol></li>
</ol></li>
<li>关系代数中的扩充运算
<ol>
<li>交运算：</li>
<li>除运算：笛卡尔积的逆运算</li>
<li>连接与自然连接运算</li>
</ol></li>
<li>关系代数的应用实例</li>
</ol></li>
<li>数据库设计与管理
<ol>
<li>数据库设计概念：</li>
<li>设计方法
<ol>
<li>面向数据的方法：以信息需求为主兼顾处理需求（主流）</li>
<li>面向过程的方法：以处理需求为主，兼顾信息需求</li>
</ol></li>
<li>生命周期法：将整个数据库应用系统的开发分解成目标独立的若干阶段，需求分析阶段、概念设计阶段、逻辑设计阶段、物理设计阶段、编码阶段、测试阶段、运行阶段、进一步修改阶段。数据库设计中采用前四个阶段</li>
<li>需求分析
<ol>
<li>获取用户的如下要求：
<ol>
<li>信息要求</li>
<li>处理要求</li>
<li>安全性和完整性要求</li>
</ol></li>
<li>数据字典是进行详细的数据收集和数据分析所获的的主要结果</li>
</ol></li>
<li>数据库概念设计
<ol>
<li>概述
<ol>
<li>集中式模型设计法</li>
<li>视图集成模式设计法</li>
</ol></li>
<li>过程
<ol>
<li>选择局部应用</li>
<li>视图设计
<ol>
<li>自顶向下</li>
<li>自底向上</li>
<li>由内向外</li>
</ol></li>
<li>视图集成
<ol>
<li>注意：命名冲突、概念冲突、域冲突、约束冲突</li>
</ol></li>
</ol></li>
</ol></li>
<li>数据库的逻辑设计
<ol>
<li>从E-R图向关系模式转换
<ol>
<li>实体集与联系都可以表示成关系</li>
<li>属性转换为关系的属性</li>
<li>实体转换为元组</li>
</ol></li>
<li>逻辑模式规范化及调整、实现
<ol>
<li>规范化：设计不良的关系模式会有数据冗余、插入异常、删除异常及修改异常等问题，需要通过分解进行规范化
<ol>
<li>对于关系模式若其中的每个属性都已不能再分为简单项，则它属于第一范式模式（1NF）</li>
<li>如果某个关系模式R为第一范式并且R中每一个非主属性完全函数依赖于R的某个候选键，则称其为第二范式模式（2NF）（消除了非主属性对主键的部分依赖）</li>
<li>如果关系模式R是第二范式，并且每个非主属性都不传递依赖于R的候选键，则称R为第三范式模式（3NF）</li>
<li>更高级的是BCNF，要求所有属性都不传递依赖于关系的任何候选键，但是并不一定要做到，一般做到三就好了</li>
</ol></li>
<li>RDBMS
<ol>
<li>调整性能以减少连接运算</li>
<li>调整关系大小，使每个关系数量保持在合理水平，从而提高存取效率</li>
<li>尽量采用快照</li>
</ol></li>
</ol></li>
<li>关系视图设计：关系视图是在关系模式基础上所设计的直接面向操作用户的视图，它可以根据用户需求随时创建
<ol>
<li>提供数据逻辑独立性</li>
<li>能适应用户对数据的不同需求</li>
<li>有一定数据保密功能</li>
</ol></li>
</ol></li>
<li>数据库的物理设计
<ol>
<li>数据库管理
<ol>
<li>数据库建立
<ol>
<li>数据模式建立</li>
<li>数据加载</li>
</ol></li>
</ol></li>
<li>数据库的调整</li>
<li>数据库的重组</li>
<li>数据库安全性控制与完整性控制</li>
<li>数据库的故障较复</li>
<li>数据库监控</li>
</ol></li>
</ol></li>
</ol>

<h2 id="toc_1">数据结构与算法</h2>

<ol>
<li>算法基本特征：
<ol>
<li>可行性：每个步骤能够实现；结果能达到预期</li>
<li>确定性</li>
<li>有穷性</li>
<li>拥有足够多的情报</li>
</ol></li>
<li>算法设计基本方法
<ol>
<li>列举法</li>
<li>归纳法</li>
<li>递推</li>
<li>递归
<ol>
<li>自己调用自己的过程称为递归调用过程</li>
</ol></li>
<li>减半递推技术
<ol>
<li>二分法求方程实根</li>
</ol></li>
<li>回溯法</li>
</ol></li>
<li>算法的复杂程度
<ol>
<li>算法时间复杂度：算法的工作量与算法所执行的基本运算次数以及问题的规模有关，而有时算法所执行的基本运算次数与特定的输入有关
<ol>
<li>平均性态：各种特定输入下基本运算次数的加权平均数。A(n)</li>
<li>最坏情况复杂性：在规模为n时，算法所执行的基本运算的最大次数。W(n)。比A(n)更具有实用价值。</li>
</ol></li>
<li>算法的空间复杂度：执行这个算法所需要的内存空间</li>
</ol></li>
<li>数据结构
<ol>
<li>数据结构是指反应数据元素之间关系的数据元素集合的表示</li>
<li>数据处理：是指对数据集合中的各元素以各种方式进行运算，包括插入、删除、查找、更改等，也包括对数据元素进行分析</li>
<li>前后件关系时数据元素之间的一个基本关系，数据元素之间的任何关系都可以用前后件关系来描述</li>
</ol></li>
<li>数据的逻辑结构</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[计算机三级知识点]]></title>
    <link href="https://cubetian.github.io/15623137342353.html"/>
    <updated>2019-07-05T16:02:14+08:00</updated>
    <id>https://cubetian.github.io/15623137342353.html</id>
    <content type="html"><![CDATA[
<p>1.1.1 计算机网络的分类<br/>
目标：资源共享<br/>
1.局域网（LAN）<br/>
有限的地理范围、高数据传输效率（10Mbps～10Gbps）、易于建立、维护与扩展<br/>
<strong>介质访问方法</strong>的角度：<br/>
共享介质式（集线器）与交换式（交换机）<br/>
<strong>传输介质类型</strong>角度：有线、无线<br/>
2.城域网（MAN Metropolitan）几十公里范围内<br/>
3.广域网又称远程网 几十公里到几千公里<br/>
1.1.2 网络结构特点<br/>
1.逻辑功能：资源子网和通信子网<br/>
2.电话交换网（PSTN）有线电视网（CATV）无线城域网（WMAN）或无线局域网（WLAN）</p>

<p>实训任务一：宽带城域网的结构<br/>
设计一个宽带城域网将涉及“三个平台和一个出口”，即网络平台、业务平台、管理平台与城市宽带出口等问题。<br/>
核心层（又称核心交换层）：<br/>
1为汇聚层的网络提供高速分组转发，提供具有QoS保障能力<br/>
2提供城市的宽带IP出口<br/>
3提供访问Internet所需要的路由访问<br/>
汇聚层：<br/>
1汇聚接入层的用户流量<br/>
2进行本地处理<br/>
3用户流量转发到核心交换层或本地进行路由处理<br/>
接入层<br/>
连接最终用户<br/>
三层结构思想：上层负责下层的数据汇聚；核心提供出口与QOS、汇聚本地路由、接入服务用户</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1、安装aircrack-ng]]></title>
    <link href="https://cubetian.github.io/15375337935500.html"/>
    <updated>2018-09-21T20:43:13+08:00</updated>
    <id>https://cubetian.github.io/15375337935500.html</id>
    <content type="html"><![CDATA[
<p>命令：brew install aircrack-ng</p>

<p>注意，如果没安装brew,访问：<a href="https://brew.sh%EF%BC%8C%E9%A6%96%E9%A1%B5%E4%B8%8A%E6%9C%89%E5%AE%89%E8%A3%85brew%E7%9A%84%E5%91%BD%E4%BB%A4%EF%BC%8C%E6%88%91%E5%AE%89%E8%A3%85%E6%97%B6%EF%BC%88201706%EF%BC%89%E5%91%BD%E4%BB%A4%E5%A6%82%E4%B8%8B%EF%BC%9A">https://brew.sh，首页上有安装brew的命令，我安装时（201706）命令如下：</a></p>

<p>/usr/bin/ruby -e &quot;$(curl -fsSLhttps://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</p>

<p>2、添加airport快链</p>

<p>命令：ln -s /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport /usr/local/bin/airport</p>

<p>3、使用mac自带的airport选取mac地址</p>

<p>命令：airport -s</p>

<p>选择CHANNEL的数值，比如：11</p>

<p>4、监听选定的频道获取到握手的包</p>

<p>命令：airport en0 sniff 11</p>

<p>运行一段时间，就可以在/tmp收获以.cap结尾的分析包，结束之后会提示保存的.cap文件位置</p>

<p>注意：（1）尽可能不要运行太长时间，否则.cap文件会比较大；</p>

<p>（2）可以使用ctr+c结束运行(我刚开始就不知道🙈)；</p>

<p>（3）如果提示权限问题，则使用 sudo airport en0 sniff 11</p>

<p>5、用 aircrack-ng分析cap包</p>

<p>命令：sudo aircrack-ng  /tmp/airportSniff******.cap</p>

<p>找到有(1 handshake)的那一行记录，记录下BSSID（比如是:10:02:22:23:7v:6f）。</p>

<p>建议直接搜索，否则能看晕，如果没有搜索到，请重新执行第4步；</p>

<p>6、开始暴力破解</p>

<p>命令：sudo aircrack-ng-wpojie.txt-b10:02:22:23:7v:6f/tmp/airportSniff******.cap</p>

<p>注意：.txt为破解字典</p>

<p>如果有碰撞到密码，程序会停止，并显示密码。</p>

<p>作者：世觋<br/>
链接：<a href="https://www.jianshu.com/p/fe27189f8691">https://www.jianshu.com/p/fe27189f8691</a><br/>
來源：简书<br/>
简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>

]]></content>
  </entry>
  
</feed>
